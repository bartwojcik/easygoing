upstream gunicorn_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:/var/easygoing/gunicorn.sock fail_timeout=30;
}

server {
    listen 80;
    listen [::]:80;
    server_name {{fqdn}};

    location ~ /.well-known {
        allow all;
        root /var/easygoing;
    }

    location / {
        rewrite ^ https://$host$request_uri? permanent;    # force redirect http to https
    }
}

server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name {{fqdn}};

    ssl_certificate /etc/letsencrypt/live/{{fqdn}}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{fqdn}}/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/{{fqdn}}/chain.pem;
    ssl_dhparam /etc/letsencrypt/keys/dhparam.pem;

    #ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_protocols TLSv1.2;
    ssl_prefer_server_ciphers on;
    #ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_ecdh_curve secp384r1;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    keepalive_timeout 70;
    proxy_read_timeout 600;

    client_max_body_size 1G;

    access_log /var/easygoing/logs/nginx-access.log;
    error_log /var/easygoing/logs/nginx-error.log info;

    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;

    location ~ /.well-known {
        rewrite ^ http://$host$request_uri? permanent;    # force redirect https to http
    }

    location /static/ {
        alias   /var/easygoing/static/;
    }

    location /favicon.ico {
        alias /var/easygoing/media/favicon
    }

    location /media/favicon.ico {
        alias /var/easygoing/media/favicon
    }

    location /media/navbar_logo {
        alias /var/easygoing/media/navbar_logo
    }

    location /media/ {
        internal;
        alias   /var/easygoing/media/;
    }

    location / {
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        # proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://gunicorn_server;
            break;
        }
    }

    location /login {
        limit_req zone=login burst=5;

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        if (!-f $request_filename) {
            proxy_pass http://gunicorn_server;
            break;
        }
    }

    # Error pages
    error_page 500 502 503 504 /500.html;
    location = /500.html {
        root /var/easygoing/static/;
    }
}